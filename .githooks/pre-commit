#!/bin/bash
#
# Pre-commit hook for Orca project
# Runs quality checks before allowing commit
#
# To install:
#   git config core.hooksPath .githooks
#

set -e

echo "🔍 Running pre-commit quality checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if we're in Orca project
if [ ! -f "CLAUDE.md" ]; then
    echo -e "${YELLOW}⚠️  Warning: Not in Orca project root${NC}"
fi

# Get list of Python files to be committed
PYTHON_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)

if [ -z "$PYTHON_FILES" ]; then
    echo -e "${GREEN}✅ No Python files to check${NC}"
    exit 0
fi

echo -e "${YELLOW}📝 Files to check:${NC}"
echo "$PYTHON_FILES" | sed 's/^/  - /'
echo ""

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Track if any checks failed
CHECKS_FAILED=0

# 1. Black formatting check
if command_exists black; then
    echo -e "${YELLOW}🎨 Checking code formatting with Black...${NC}"
    if echo "$PYTHON_FILES" | xargs black --check --quiet 2>&1; then
        echo -e "${GREEN}✅ Black formatting passed${NC}"
    else
        echo -e "${RED}❌ Black formatting failed${NC}"
        echo -e "${YELLOW}💡 Run: black src/ tests/${NC}"
        CHECKS_FAILED=1
    fi
else
    echo -e "${YELLOW}⚠️  Black not installed, skipping formatting check${NC}"
fi

# 2. Ruff linting
if command_exists ruff; then
    echo -e "${YELLOW}🔍 Running Ruff linter...${NC}"
    if echo "$PYTHON_FILES" | xargs ruff check --quiet 2>&1; then
        echo -e "${GREEN}✅ Ruff linting passed${NC}"
    else
        echo -e "${RED}❌ Ruff linting failed${NC}"
        echo -e "${YELLOW}💡 Run: ruff check src/ tests/ --fix${NC}"
        CHECKS_FAILED=1
    fi
else
    echo -e "${YELLOW}⚠️  Ruff not installed, skipping linting${NC}"
fi

# 3. MyPy type checking (only for src/ files)
SRC_FILES=$(echo "$PYTHON_FILES" | grep '^src/' || true)
if [ -n "$SRC_FILES" ] && command_exists mypy; then
    echo -e "${YELLOW}🔎 Running MyPy type checker...${NC}"
    if echo "$SRC_FILES" | xargs mypy --no-error-summary 2>&1; then
        echo -e "${GREEN}✅ MyPy type checking passed${NC}"
    else
        echo -e "${RED}❌ MyPy type checking failed${NC}"
        echo -e "${YELLOW}💡 Fix type errors or run: mypy src/${NC}"
        CHECKS_FAILED=1
    fi
else
    if [ -n "$SRC_FILES" ]; then
        echo -e "${YELLOW}⚠️  MyPy not installed, skipping type checking${NC}"
    fi
fi

# 4. Run tests for modified files
TEST_FILES=$(echo "$PYTHON_FILES" | grep '^tests/' || true)
if [ -n "$TEST_FILES" ] && command_exists pytest; then
    echo -e "${YELLOW}🧪 Running affected tests...${NC}"
    if echo "$TEST_FILES" | xargs pytest --quiet --tb=line 2>&1; then
        echo -e "${GREEN}✅ Tests passed${NC}"
    else
        echo -e "${RED}❌ Tests failed${NC}"
        echo -e "${YELLOW}💡 Fix failing tests before committing${NC}"
        CHECKS_FAILED=1
    fi
fi

# 5. Check for common issues
echo -e "${YELLOW}🔍 Checking for common issues...${NC}"

# Check for print statements (should use logging)
if echo "$PYTHON_FILES" | xargs grep -n "print(" 2>/dev/null | grep -v "# noqa: T201" | grep -v "test_" ; then
    echo -e "${YELLOW}⚠️  Warning: print() statements found. Consider using logging instead.${NC}"
    echo -e "${YELLOW}   Add '# noqa: T201' to suppress this warning if intentional.${NC}"
fi

# Check for TODO/FIXME without issue reference
if echo "$PYTHON_FILES" | xargs grep -n "TODO\|FIXME" 2>/dev/null | grep -v "#[0-9]"; then
    echo -e "${YELLOW}⚠️  Warning: TODO/FIXME found without issue reference.${NC}"
    echo -e "${YELLOW}   Consider adding issue number: TODO(#123)${NC}"
fi

# Check for large files (>5000 lines)
for file in $PYTHON_FILES; do
    if [ -f "$file" ]; then
        lines=$(wc -l < "$file")
        if [ "$lines" -gt 5000 ]; then
            echo -e "${YELLOW}⚠️  Warning: $file has $lines lines (consider splitting)${NC}"
        fi
    fi
done

echo ""

# Summary
if [ $CHECKS_FAILED -eq 1 ]; then
    echo -e "${RED}╔════════════════════════════════════════╗${NC}"
    echo -e "${RED}║  ❌ Pre-commit checks FAILED          ║${NC}"
    echo -e "${RED}╚════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${YELLOW}Fix the issues above or use:${NC}"
    echo -e "${YELLOW}  git commit --no-verify  (to skip checks)${NC}"
    echo ""
    exit 1
else
    echo -e "${GREEN}╔════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║  ✅ All pre-commit checks PASSED      ║${NC}"
    echo -e "${GREEN}╚════════════════════════════════════════╝${NC}"
    echo ""
    exit 0
fi
