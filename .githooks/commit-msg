#!/bin/bash
#
# Commit message hook for Orca project
# Validates commit message format
#

COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Colors
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m'

# Skip merge commits
if grep -q "^Merge" "$COMMIT_MSG_FILE"; then
    exit 0
fi

# Skip revert commits
if grep -q "^Revert" "$COMMIT_MSG_FILE"; then
    exit 0
fi

# Get the first line (subject)
SUBJECT=$(head -n1 "$COMMIT_MSG_FILE")

# Check subject line length (max 72 chars, warn at 50)
SUBJECT_LENGTH=${#SUBJECT}
if [ $SUBJECT_LENGTH -gt 72 ]; then
    echo -e "${RED}‚ùå Commit message subject too long: $SUBJECT_LENGTH chars (max 72)${NC}"
    echo -e "${YELLOW}Subject: $SUBJECT${NC}"
    exit 1
elif [ $SUBJECT_LENGTH -gt 50 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Subject line is long: $SUBJECT_LENGTH chars (recommended max 50)${NC}"
fi

# Check if subject line starts with emoji (optional but recommended for Orca)
EMOJI_PATTERN='^[‚ú®üêõüìöüíÑ‚ôªÔ∏è‚úÖüîß‚ö°üîíüöÄüîÄ‚è™]'
if ! echo "$SUBJECT" | grep -qE "$EMOJI_PATTERN"; then
    echo -e "${YELLOW}‚ö†Ô∏è  Tip: Consider starting with an emoji (‚ú® feat, üêõ fix, üìö docs, etc.)${NC}"
fi

# Check for imperative mood (starts with verb)
IMPERATIVE_VERBS="^(Add|Fix|Update|Remove|Refactor|Implement|Create|Delete|Improve|Optimize|Document|Test|Merge|Revert|Bump)"
if ! echo "$SUBJECT" | grep -qiE "$IMPERATIVE_VERBS"; then
    # Remove emoji and check again
    SUBJECT_NO_EMOJI=$(echo "$SUBJECT" | sed 's/^[^A-Za-z]*//')
    if ! echo "$SUBJECT_NO_EMOJI" | grep -qiE "$IMPERATIVE_VERBS"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Tip: Use imperative mood (Add, Fix, Update, etc.)${NC}"
        echo -e "${YELLOW}   Subject: $SUBJECT${NC}"
    fi
fi

# Check if subject ends with period
if echo "$SUBJECT" | grep -q '\.$'; then
    echo -e "${RED}‚ùå Subject line should not end with period${NC}"
    exit 1
fi

# Check for WIP commits (warn)
if echo "$SUBJECT" | grep -qi "WIP\|work in progress"; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: WIP commit detected. Remember to amend before pushing.${NC}"
fi

# Check body format (if body exists)
LINE_COUNT=$(wc -l < "$COMMIT_MSG_FILE")
if [ $LINE_COUNT -gt 1 ]; then
    # Check for blank line after subject
    SECOND_LINE=$(sed -n '2p' "$COMMIT_MSG_FILE")
    if [ -n "$SECOND_LINE" ]; then
        echo -e "${RED}‚ùå Missing blank line after subject${NC}"
        echo -e "${YELLOW}Commit message format:${NC}"
        echo -e "${YELLOW}  <subject>${NC}"
        echo -e "${YELLOW}  ${NC}"
        echo -e "${YELLOW}  <body>${NC}"
        exit 1
    fi

    # Check body line length (max 72 chars)
    LONG_LINES=$(tail -n +3 "$COMMIT_MSG_FILE" | grep -v "^#" | awk 'length>72')
    if [ -n "$LONG_LINES" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: Body has lines longer than 72 characters:${NC}"
        echo "$LONG_LINES" | while read line; do
            echo -e "${YELLOW}  ${line:0:80}...${NC}"
        done
    fi
fi

# Check for Orca-Archon specific patterns

# ARCHON INTEGRATION: Validate TASK-XXX format for feature commits
BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "")

# Require TASK-XXX for feature branches (unless docs/chore/test)
if [[ "$BRANCH_NAME" == feature/* ]] || [[ "$BRANCH_NAME" == fix/* ]] || [[ "$BRANCH_NAME" == refactor/* ]]; then
    # Check if subject or body contains TASK-XXX
    if ! echo "$COMMIT_MSG" | grep -q "TASK-[0-9]\{3\}"; then
        # Allow bypass for docs, chores, and tests
        if ! echo "$SUBJECT" | grep -qiE "^(docs|chore|test|style):"; then
            echo -e "${RED}‚ùå Feature/fix commits must include TASK-XXX reference${NC}"
            echo -e "${YELLOW}Branch: $BRANCH_NAME${NC}"
            echo -e "${YELLOW}Add TASK-XXX to commit message or use 'docs:', 'chore:', 'test:' prefix${NC}"
            echo -e "${YELLOW}Example: feat(TASK-005): Add parallel orchestration${NC}"
            exit 1
        fi
    else
        # Validate TASK-XXX format (TASK-001 to TASK-999)
        TASK_ID=$(echo "$COMMIT_MSG" | grep -o "TASK-[0-9]\{3\}" | head -n 1)
        echo -e "${GREEN}‚úì Task reference found: $TASK_ID${NC}"
    fi
fi

# Suggest TASK marker if implementing from execution plan
if echo "$COMMIT_MSG" | grep -qi "implement\|complete\|finish" && ! echo "$COMMIT_MSG" | grep -q "TASK-[0-9]\{3\}"; then
    echo -e "${YELLOW}üí° Tip: If implementing from execution plan, add TASK-XXX marker${NC}"
fi

# Suggest test coverage info for significant changes
if echo "$SUBJECT" | grep -qi "implement\|add.*feature\|refactor" && ! echo "$COMMIT_MSG" | grep -qi "test\|coverage"; then
    echo -e "${YELLOW}üí° Tip: Consider mentioning test coverage for significant changes${NC}"
fi

# Suggest Claude co-authorship for AI-assisted commits
if ! echo "$COMMIT_MSG" | grep -q "Co-Authored-By.*Claude"; then
    if echo "$COMMIT_MSG" | grep -qi "claude\|ai\|generated\|assistant"; then
        echo -e "${YELLOW}üí° Tip: Add 'Co-Authored-By: Claude <noreply@anthropic.com>' for Claude Code contributions${NC}"
    fi
fi

echo -e "${GREEN}‚úÖ Commit message format OK${NC}"
exit 0
