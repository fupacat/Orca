#!/bin/bash
#
# Pre-push hook for Orca project
# Runs full quality suite before allowing push
#

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${YELLOW}🚀 Running pre-push quality checks...${NC}"
echo ""

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

CHECKS_FAILED=0

# Get branch name and remote
BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "")
REMOTE=$1
URL=$2

# 0. ARCHON INTEGRATION: Verify TASK-XXX in feature branch commits
if [[ "$BRANCH_NAME" == feature/* ]] || [[ "$BRANCH_NAME" == fix/* ]] || [[ "$BRANCH_NAME" == refactor/* ]]; then
    echo -e "${YELLOW}🔍 Verifying TASK-XXX references in commits...${NC}"

    # Get commits that will be pushed
    if [ -n "$REMOTE" ]; then
        COMMITS=$(git log $REMOTE/$BRANCH_NAME..HEAD --pretty=format:"%H %s" 2>/dev/null || git log --pretty=format:"%H %s" -10)
    else
        COMMITS=$(git log --pretty=format:"%H %s" -10)
    fi

    INVALID_COMMITS=0
    while IFS= read -r commit_line; do
        COMMIT_HASH=$(echo "$commit_line" | awk '{print $1}')
        COMMIT_MSG=$(echo "$commit_line" | cut -d' ' -f2-)

        # Skip merge commits
        if echo "$COMMIT_MSG" | grep -q "^Merge"; then
            continue
        fi

        # Allow docs, chore, test commits without TASK-XXX
        if echo "$COMMIT_MSG" | grep -qE "^(docs|chore|test|style):"; then
            continue
        fi

        # Check for TASK-XXX
        if ! echo "$COMMIT_MSG" | grep -q "TASK-[0-9]\{3\}"; then
            echo -e "${RED}  ❌ Missing TASK-XXX: ${COMMIT_HASH:0:7} - $COMMIT_MSG${NC}"
            INVALID_COMMITS=$((INVALID_COMMITS + 1))
        fi
    done <<< "$COMMITS"

    if [ $INVALID_COMMITS -gt 0 ]; then
        echo -e "${RED}❌ Found $INVALID_COMMITS commit(s) without TASK-XXX reference${NC}"
        echo -e "${YELLOW}Fix with: git rebase -i HEAD~N and amend commit messages${NC}"
        CHECKS_FAILED=1
    else
        echo -e "${GREEN}✅ All commits have valid TASK-XXX references${NC}"
    fi
    echo ""
fi

# 1. Run full test suite
if command_exists pytest; then
    echo -e "${YELLOW}🧪 Running full test suite...${NC}"
    if python -m pytest tests/ -q --tb=line; then
        echo -e "${GREEN}✅ All tests passed${NC}"
    else
        echo -e "${RED}❌ Tests failed${NC}"
        CHECKS_FAILED=1
    fi
    echo ""
else
    echo -e "${YELLOW}⚠️  Pytest not installed, skipping tests${NC}"
fi

# 2. Check test coverage
if command_exists pytest && command_exists coverage; then
    echo -e "${YELLOW}📊 Checking test coverage...${NC}"
    if python -m pytest tests/ --cov=src --cov-report=term --cov-fail-under=80 -q; then
        echo -e "${GREEN}✅ Coverage meets minimum threshold (80%)${NC}"
    else
        echo -e "${RED}❌ Coverage below threshold${NC}"
        CHECKS_FAILED=1
    fi
    echo ""
fi

# 3. Security scan
if command_exists bandit; then
    echo -e "${YELLOW}🔒 Running security scan...${NC}"
    if bandit -r src/ -ll -q; then
        echo -e "${GREEN}✅ No high/medium severity security issues${NC}"
    else
        echo -e "${RED}❌ Security issues detected${NC}"
        CHECKS_FAILED=1
    fi
    echo ""
else
    echo -e "${YELLOW}⚠️  Bandit not installed, skipping security scan${NC}"
fi

# 4. Check for secrets/credentials
echo -e "${YELLOW}🔍 Checking for exposed secrets...${NC}"
SECRETS_FOUND=0

# Common secret patterns
if git diff origin/$(git rev-parse --abbrev-ref HEAD)..HEAD | grep -iE "(api[_-]?key|secret|password|token|credentials)" | grep -v "# noqa"; then
    echo -e "${RED}⚠️  Potential secrets detected in diff!${NC}"
    SECRETS_FOUND=1
fi

# Check for common credential files
CREDENTIAL_FILES=".env .env.local credentials.json secrets.yaml"
for file in $CREDENTIAL_FILES; do
    if git diff --name-only origin/$(git rev-parse --abbrev-ref HEAD)..HEAD | grep -q "^$file$"; then
        echo -e "${RED}⚠️  Warning: $file in push (may contain secrets)${NC}"
        SECRETS_FOUND=1
    fi
done

if [ $SECRETS_FOUND -eq 0 ]; then
    echo -e "${GREEN}✅ No obvious secrets detected${NC}"
else
    echo -e "${YELLOW}💡 Review changes carefully before pushing${NC}"
    echo -e "${YELLOW}   Use git-secrets or similar tools for thorough scanning${NC}"
fi
echo ""

# 5. Check branch protection
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
PROTECTED_BRANCHES="main master production"

for branch in $PROTECTED_BRANCHES; do
    if [ "$CURRENT_BRANCH" = "$branch" ]; then
        echo -e "${RED}❌ Direct push to $branch is not allowed${NC}"
        echo -e "${YELLOW}   Create a feature branch instead:${NC}"
        echo -e "${YELLOW}     git checkout -b feature/my-feature${NC}"
        echo -e "${YELLOW}     git cherry-pick <commit>${NC}"
        exit 1
    fi
done

# 6. Check commit messages in push
echo -e "${YELLOW}📝 Validating commit messages...${NC}"
INVALID_COMMITS=0

# Get commits being pushed
COMMITS=$(git rev-list origin/$(git rev-parse --abbrev-ref HEAD)..HEAD 2>/dev/null || git rev-list HEAD)

for commit in $COMMITS; do
    MSG=$(git log --format=%B -n 1 $commit | head -n 1)
    LENGTH=${#MSG}

    if [ $LENGTH -gt 72 ]; then
        echo -e "${YELLOW}⚠️  Long subject in $commit: $LENGTH chars${NC}"
        INVALID_COMMITS=$((INVALID_COMMITS + 1))
    fi
done

if [ $INVALID_COMMITS -eq 0 ]; then
    echo -e "${GREEN}✅ All commit messages valid${NC}"
fi
echo ""

# Summary
if [ $CHECKS_FAILED -eq 1 ]; then
    echo -e "${RED}╔════════════════════════════════════════╗${NC}"
    echo -e "${RED}║  ❌ Pre-push checks FAILED             ║${NC}"
    echo -e "${RED}╚════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${YELLOW}Fix the issues above or use:${NC}"
    echo -e "${YELLOW}  git push --no-verify  (to skip checks)${NC}"
    echo ""
    exit 1
else
    echo -e "${GREEN}╔════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║  ✅ All pre-push checks PASSED        ║${NC}"
    echo -e "${GREEN}╚════════════════════════════════════════╝${NC}"
    echo ""
    exit 0
fi
