[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "orca-development-execution"
version = "1.0.0"
description = "Development execution workflow for Orca - stateless parallel agent coordination"
authors = [{name = "Orca Development Team"}]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["development", "automation", "parallel", "execution", "workflow"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
]

dependencies = [
    "pydantic>=2.0,<3.0",
    "typing-extensions>=4.0",
    "asyncio-mqtt>=0.13.0",
    "httpx>=0.24.0",
    "jsonschema>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10.0",
    "mypy>=1.5.0",
    "pylint>=2.17.0",
    "black>=23.0.0",
    "bandit>=1.7.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
]

quality = [
    "mypy>=1.5.0",
    "pylint>=2.17.0",
    "black>=23.0.0",
    "bandit>=1.7.0",
    "isort>=5.12.0",
]

test = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10.0",
    "coverage>=7.0",
]

[project.urls]
Homepage = "https://github.com/eolun/orca"
Documentation = "https://github.com/eolun/orca/docs"
Repository = "https://github.com/eolun/orca.git"
Issues = "https://github.com/eolun/orca/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--cov=src",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=95",
    "-v",
    "--tb=short",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "parallel: Tests for parallel execution",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
]
show_missing = true
precision = 2

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pylint.main]
load-plugins = ["pylint.extensions.docparams"]
extension-pkg-whitelist = ["pydantic"]

[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "missing-class-docstring",
    "missing-function-docstring",
]

[tool.pylint.format]
max-line-length = 120

[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_possible for tests